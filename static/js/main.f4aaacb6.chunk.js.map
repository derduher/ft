{"version":3,"sources":["Products/products.js","Product/product.js","App/App.js","serviceWorker.js","reducers/products-by-id.js","reducers.js","index.js"],"names":["ProductItem","_ref","productNo","images","productDisplayName_en","bodyShape","react_default","a","createElement","className","key","react_router_dom","to","process","src","Products","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","series","productType","onSeriesFilterChange","e","setState","target","value","onProductFilterChange","inherits","createClass","_this2","props","products","filter","doc","seriesId","prodTypeId","activeProducts","_this$props","seriesTypes","productTypes","htmlFor","id","onChange","map","_ref2","_ref3","Component","connect","_ref4","ownProps","productsById","match","_productsById$match$p","params","name","imgSrc","find","i","alt","App","react_router","exact","path","component","Product","Boolean","window","location","hostname","initialState","productsJSON","documents","reduce","ac","product","objectSpread","defineProperty","seriesById","productById","forEach","push","reducers","combineReducers","undefined","type","store","createStore","ReactDOM","render","es","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4aaacb6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom';\n\nfunction ProductItem ({\n  productNo,\n  images,\n  productDisplayName_en,\n  bodyShape\n}) {\n  return <li className='product' key={productNo}>\n    <Link to={process.env.PUBLIC_URL + '/product/' + productNo} className='product__img'><img key={productNo + images[0]} src={images[0]} /></Link>\n    <Link to={process.env.PUBLIC_URL + '/product/' + productNo} className='product__name'>{ productDisplayName_en || bodyShape || 'no name' }</Link>\n  </li>\n}\n\nexport class Products extends Component {\n  state = {\n    series: '',\n    productType: ''\n  }\n  onSeriesFilterChange = e => this.setState({series: e.target.value})\n  onProductFilterChange = e => this.setState({productType: e.target.value})\n  activeProducts () {\n    return this.props.products.filter(doc =>\n      (!this.state.series || doc.seriesId === this.state.series)\n      && (!this.state.productType || doc.prodTypeId === this.state.productType))\n  }\n\n  render () {\n    const activeProducts = this.activeProducts()\n    const {\n      seriesTypes,\n      productTypes\n    } = this.props\n    return (\n      <div className='products-container'>\n        <div className='sidebar'>\n          <label htmlFor='seriesFilter'>Series Type</label>\n          <select id='seriesFilter' onChange={this.onSeriesFilterChange}>\n            {\n              seriesTypes.map(({seriesId, series}) => <option key={seriesId} value={seriesId}>{series}</option>)\n            }\n          </select>\n          <label htmlFor='productFilter'>Product Type</label>\n          <select id='productFilter' onChange={this.onProductFilterChange}>\n            {\n              productTypes.map(({prodTypeId, productType}) => <option key={prodTypeId} value={prodTypeId}>{productType}</option>)\n            }\n          </select>\n        </div>\n        <ul className='products'>\n          {\n            activeProducts.map(ProductItem)\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps ({ seriesTypes, productTypes, products }, ownProps) {\n  return { seriesTypes, productTypes, products }\n}\n\nexport default connect(mapStateToProps)(Products)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// <pre>{JSON.stringify(productsById[match.params.id], null, 2)}</pre>\nexport function Product ({ match, productsById }) {\n  const {\n    images,\n    productDisplayName_en: name,\n    bodyShape\n  } = productsById[match.params.id]\n  // ideally the source json would indicate with metadata the intended use\n  const imgSrc = images.find(i => !i.match(/Zoom/)) || images[0]\n  return <div className='product-page'>\n    <img src={imgSrc} alt='primary product image' className='product-img' />\n    <div>{ name || bodyShape || 'no name' }</div>\n  </div>\n}\n\nfunction mapStateToProps ({ productsById }, ownProps) {\n  return { productsById }\n}\nexport default connect(mapStateToProps)(Product)\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Products from '../Products/products.js'\nimport Product from '../Product/product.js'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + '/'} component={Products} />\n          <Route path={process.env.PUBLIC_URL + '/product/:id'} component={Product} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import productsJSON from '../products.json'\nconst initialState = productsJSON.documents.reduce((ac, product) => ({ ...ac, [product.productNo]: product }), {})\nexport function productsById (state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { productsById } from './reducers/products-by-id.js'\nimport productsJSON from './products.json'\nconst seriesById = {}\nconst productById = {}\nconst seriesTypes = [{ seriesId: '' }]\nconst productTypes = [{ prodTypeId: '' }]\nproductsJSON.documents.forEach(({ series, seriesId, productType, prodTypeId }) => {\n  if (!seriesById[seriesId]) {\n    seriesById[seriesId] = true\n    seriesTypes.push({ seriesId, series })\n  }\n  if (!productById[prodTypeId]) {\n    productById[prodTypeId] = true\n    productTypes.push({ prodTypeId, productType })\n  }\n})\nexport const reducers = combineReducers({\n  productsById,\n  seriesTypes: (state = seriesTypes) => state,\n  productTypes: (state = productTypes) => state,\n  products: (state = productsJSON.documents) => state\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App/App.js'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { reducers } from './reducers.js'\nconst store = createStore(reducers)\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}